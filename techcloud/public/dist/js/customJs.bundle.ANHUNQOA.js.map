{
  "version": 3,
  "sources": ["../../../../../apps/techcloud/techcloud/public/js/customJs.bundle.js"],
  "sourcesContent": ["// // function removePageTItles(){\n// //   const  pageTitle = document.querySelector(\".page-title\");\n// //     // Start observing changes in the body subtree\n// //   observer.observe(document.body, {\n// //     childList: true,\n// //     subtree: true,\n// //   });\n\n// // }\n// // document.addEventListener(\"DOMContentLoaded\", movePageHeadContent);\n\n// // sliding active bar for ERPNext form tabs (no frappe.ready)\n\n\n\n// // from-tab sliding effect\n\n// document.addEventListener('DOMContentLoaded', function () {\n//   function initSlidingTabs(ul) {\n//     if (!ul || ul.dataset.slidingTabsInitialized) return;\n//     ul.dataset.slidingTabsInitialized = '1';\n//     ul.style.position = ul.style.position || 'relative';\n\n//     // create the highlight bar\n//     const bar = document.createElement('div');\n//     bar.className = 'sliding-tab-bar';\n//     Object.assign(bar.style, {\n//       position: 'absolute',\n//       bottom: '0',\n//       height: '4px',\n//       background: 'var(--_primary-bg-color)',\n//       borderRadius: '1em 1em 0em 0em',\n//       transition: 'transform 200ms ease, width 200ms ease',\n//       left: '0',\n//       width: '0',\n//       zIndex: '1',\n//       pointerEvents: 'none'\n//     });\n//     ul.appendChild(bar);\n\n//     const update = () => {\n//       const active =\n//         ul.querySelector('.nav-link.active') ||\n//         ul.querySelector('.nav-link');\n//       if (!active) return;\n//       const linkRect = active.getBoundingClientRect();\n//       const ulRect = ul.getBoundingClientRect();\n//       const left = linkRect.left - ulRect.left + ul.scrollLeft;\n//       bar.style.width = linkRect.width + 'px';\n//       bar.style.transform = `translateX(${left}px)`;\n//     };\n\n//     // update on clicks (wait for bootstrap to toggle .active)\n//     ul.addEventListener('click', (e) => {\n//       const link = e.target.closest('.nav-link');\n//       if (link && ul.contains(link)) {\n//         setTimeout(update, 150);\n//       }\n//     });\n\n//     // update on resize\n//     window.addEventListener('resize', update);\n\n//     // observe active class changes & DOM changes inside the tabs\n//     const mo = new MutationObserver(() => update());\n//     mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\n\n//     // initial position\n//     setTimeout(update, 0);\n//   }\n\n//   function scanAndInit() {\n//     document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\n//   }\n\n//   // initial scan\n//   scanAndInit();\n\n//   // ERPNext desk is SPA-like; watch for new forms/tabs injected later\n//   const bodyObserver = new MutationObserver(() => scanAndInit());\n//   bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n//   // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\n//   document.addEventListener('click', (e) => {\n//     if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\n//       setTimeout(scanAndInit, 200);\n//     }\n//   });\n// });\n\n\n\n\n\n\n\n// // from-tab sliding effect\n\n// document.addEventListener('DOMContentLoaded', function () {\n//   function initSlidingTabs(ul) {\n//     if (!ul || ul.dataset.slidingTabsInitialized) return;\n//     ul.dataset.slidingTabsInitialized = '1';\n//     ul.style.position = ul.style.position || 'relative';\n\n//     // create the highlight bar\n//     const bar = document.createElement('div');\n//     bar.className = 'sliding-tab-bar';\n//     Object.assign(bar.style, {\n//       position: 'absolute',\n//       bottom: '0',\n//       height: '4px',\n//       background: 'var(--_primary-bg-color)',\n//       borderRadius: '1em 1em 0em 0em',\n//       transition: 'transform 200ms ease, width 200ms ease',\n//       left: '0',\n//       width: '0',\n//       zIndex: '1',\n//       pointerEvents: 'none'\n//     });\n//     ul.appendChild(bar);\n\n//     const update = () => {\n//       const active =\n//         ul.querySelector('.nav-link.active') ||\n//         ul.querySelector('.nav-link');\n//       if (!active) return;\n//       const linkRect = active.getBoundingClientRect();\n//       const ulRect = ul.getBoundingClientRect();\n//       const left = linkRect.left - ulRect.left + ul.scrollLeft;\n//       bar.style.width = linkRect.width + 'px';\n//       bar.style.transform = `translateX(${left}px)`;\n//     };\n\n//     // update on clicks (wait for bootstrap to toggle .active)\n//     ul.addEventListener('click', (e) => {\n//       const link = e.target.closest('.nav-link');\n//       if (link && ul.contains(link)) {\n//         setTimeout(update, 150);\n//       }\n//     });\n\n//     // update on resize\n//     window.addEventListener('resize', update);\n\n//     // observe active class changes & DOM changes inside the tabs\n//     const mo = new MutationObserver(() => update());\n//     mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\n\n//     // initial position\n//     setTimeout(update, 0);\n//   }\n\n//   function scanAndInit() {\n//     document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\n//   }\n\n//   // initial scan\n//   scanAndInit();\n\n//   // ERPNext desk is SPA-like; watch for new forms/tabs injected later\n//   const bodyObserver = new MutationObserver(() => scanAndInit());\n//   bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n//   // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\n//   document.addEventListener('click', (e) => {\n//     if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\n//       setTimeout(scanAndInit, 200);\n//     }\n//   });\n// });\n\n\n// // \n\n// // sidebar false\n// document.addEventListener(\"DOMContentLoaded\", function () {\n//   const sidebar = document.querySelector(\".sidebar\"); // your sidebar element\n//   const toggleBtn = document.querySelector(\".sidebar-toggle-btn\");\n//   const toggleIcon = toggleBtn.querySelector(\".sidebar-toggle-icon use\");\n\n//   // \u2705 Collapse by default\n//   sidebar.classList.add(\"collapsed\");\n//   toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-expand\");\n\n//   // \u2705 Toggle on click\n//   toggleBtn.addEventListener(\"click\", function () {\n//     if (sidebar.classList.contains(\"collapsed\")) {\n//       // Expand\n//       sidebar.classList.remove(\"collapsed\");\n//       toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-collapse\");\n//       console.log(\"collapsed sidebar\")\n//     } else {\n//       // Collapse\n//       sidebar.classList.add(\"collapsed\");\n//       toggleIcon.setAttribute(\"href\", \"#es-line-sidebar-expand\");\n//       console.log(\"expand  sidebar\")\n\n//     }\n//   });\n// });\n\n\n\n// function removePageTItles(){\n//   const  pageTitle = document.querySelector(\".page-title\");\n//     // Start observing changes in the body subtree\n//   observer.observe(document.body, {\n//     childList: true,\n//     subtree: true,\n//   });\n\n// }\n// document.addEventListener(\"DOMContentLoaded\", movePageHeadContent);\n\n// sliding active bar for ERPNext form tabs (no frappe.ready)\n\n\n\n// from-tab sliding effect\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  function initSlidingTabs(ul) {\n    if (!ul || ul.dataset.slidingTabsInitialized) return;\n    ul.dataset.slidingTabsInitialized = '1';\n    ul.style.position = ul.style.position || 'relative';\n\n    // create the highlight bar\n    const bar = document.createElement('div');\n    bar.className = 'sliding-tab-bar';\n    Object.assign(bar.style, {\n      position: 'absolute',\n      bottom: '0',\n      height: '4px',\n      background: 'orange',\n      borderRadius: '1em 1em 0em 0em',\n      transition: 'transform 200ms ease, width 200ms ease',\n      left: '0',\n      width: '0',\n      zIndex: '1',\n      pointerEvents: 'none'\n    });\n    ul.appendChild(bar);\n    console.log(\"tab active slideer insterd\")\n\n    const update = () => {\n      const active =\n        ul.querySelector('.nav-link.active') ||\n        ul.querySelector('.nav-link');\n      if (!active) return;\n      const linkRect = active.getBoundingClientRect();\n      const ulRect = ul.getBoundingClientRect();\n      const left = linkRect.left - ulRect.left + ul.scrollLeft;\n      bar.style.width = linkRect.width + 'px';\n      bar.style.transform = `translateX(${left}px)`;\n    };\n\n    // update on clicks (wait for bootstrap to toggle .active)\n    ul.addEventListener('click', (e) => {\n      const link = e.target.closest('.nav-link');\n      if (link && ul.contains(link)) {\n        setTimeout(update, 150);\n      }\n    });\n\n    // update on resize\n    window.addEventListener('resize', update);\n\n    // observe active class changes & DOM changes inside the tabs\n    const mo = new MutationObserver(() => update());\n    mo.observe(ul, { subtree: true, childList: true, attributes: true, attributeFilter: ['class'] });\n\n    // initial position\n    setTimeout(update, 0);\n  }\n\n  function scanAndInit() {\n    document.querySelectorAll('ul.form-tabs, ul.nav-tabs, #form-tabs').forEach(initSlidingTabs);\n  }\n\n  // initial scan\n  scanAndInit();\n\n  // ERPNext desk is SPA-like; watch for new forms/tabs injected later\n  const bodyObserver = new MutationObserver(() => scanAndInit());\n  bodyObserver.observe(document.body, { childList: true, subtree: true });\n\n  // also rescan after Bootstrap tab show (BS4/BS5 attribute variants)\n  document.addEventListener('click', (e) => {\n    if (e.target.closest('a[data-toggle=\"tab\"], a[data-bs-toggle=\"tab\"]')) {\n      setTimeout(scanAndInit, 200);\n    }\n  });\n});\n\n\n\n//  login password\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//     const injectToggle = (input) => {\n//         // avoid duplicate injection\n//         if (input.parentNode.querySelector(\".toggle-password\")) return;\n\n//         let toggle = document.createElement(\"div\");\n//         toggle.classList.add(\"toggle-password\");\n//         toggle.innerHTML = `\n//             <svg class=\"icon icon-sm\" aria-hidden=\"true\">\n//                 <use href=\"#icon-unhide\"></use>\n//             </svg>\n//         `;\n\n//         // style position relative so we can absolutely position the icon\n//         input.parentNode.style.position = \"relative\";\n//         toggle.style.position = \"absolute\";\n//         toggle.style.right = \"10px\";\n//         toggle.style.top = \"50%\";\n//         toggle.style.transform = \"translateY(-50%)\";\n//         toggle.style.cursor = \"pointer\";\n\n//         input.parentNode.appendChild(toggle);\n\n//         // toggle logic\n//         toggle.addEventListener(\"click\", () => {\n//             if (input.type === \"password\") {\n//                 input.type = \"text\";\n//                 toggle.querySelector(\"use\").setAttribute(\"href\", \"#icon-hide\");\n//             } else {\n//                 input.type = \"password\";\n//                 toggle.querySelector(\"use\").setAttribute(\"href\", \"#icon-unhide\");\n//             }\n//         });\n//     };\n\n//     // Initial injection\n//     document.querySelectorAll('input[type=\"password\"]').forEach(injectToggle);\n\n//     // Observe for dynamically added inputs\n//     const observer = new MutationObserver((mutations) => {\n//         mutations.forEach((mutation) => {\n//             mutation.addedNodes.forEach((node) => {\n//                 if (node.nodeType === 1) {\n//                     // direct input\n//                     if (node.matches?.('input[type=\"password\"]')) {\n//                         injectToggle(node);\n//                     }\n//                     // nested inputs inside added container\n//                     node.querySelectorAll?.('input[type=\"password\"]').forEach(injectToggle);\n//                 }\n//             });\n//         });\n//     });\n\n//     observer.observe(document.body, { childList: true, subtree: true });\n// });\n\n\n//     // Initial injection\n\n//     // Observe for dynamically added inputs\n//     const observer = new MutationObserver((mutations) => {\n//         mutations.forEach((mutation) => {\n//             mutation.addedNodes.forEach((node) => {\n//                 if (node.nodeType === 1) {\n//                     // direct input\n//                     if (node.matches?.('input[type=\"password\"]')) {\n//                         injectToggle(node);\n//                     }\n//                     // nested inputs inside added container\n//                     node.querySelectorAll?.('input[type=\"password\"]').forEach(injectToggle);\n//                 }\n//             });\n//         });\n//     });\n\n//     observer.observe(document.body, { childList: true, subtree: true });\n\n\n\n    \n\n// \ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  console.log(\"Awesomplete shift start\");\n\n  const observer = new MutationObserver(() => {\n    // find focused input inside form-grid that has awesomplete\n    const activeInput = document.querySelector(\n      '.form-grid .awesomplete input:focus[aria-owns]'\n    );\n\n    if (activeInput) {\n      const listId = activeInput.getAttribute(\"aria-owns\");\n      const list = document.getElementById(listId);\n\n      if (list) {\n        console.log(\"Focused input:\", activeInput.dataset.fieldname, activeInput);\n        console.log(\"Dropdown list:\", listId, list);\n\n        // move list to <body> so it's not clipped by table/grid\n        if (!list.dataset.shifted) {\n          list.dataset.shifted = \"1\"; \n          document.body.appendChild(list);\n\n          // reset base styles\n          list.style.position = \"absolute\";\n          list.style.background= \"white\";\n          list.style.width=\"350px\"\n          list.style.border=\"1.4px solid whitesmoke\"\n          list.style.zIndex = \"9999\"; // ensure it's above form\n          list.hidden = false;\n        }\n\n        // always recalc position relative to input\n        const rect = activeInput.getBoundingClientRect();\n        list.style.top = rect.bottom + window.scrollY + \"px\";\n        list.style.left = rect.left + window.scrollX + \"px\";\n        list.style.width = rect.width + \"px\";\n      }\n    }\n  });\n\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n  });\n});\n\n\n// document.addEventListener(\"DOMContentLoaded\", function () {\n//   console.log(\"Awesomplete shift start\");\n\n//   const observer = new MutationObserver(() => {\n//     // only pick lists inside form-grid\n//     const list = document.querySelector(\n//       '.form-grid .scrollable-xx-xxxx ul[id^=\"awesomplete_list_\"]:not([data-shifted])'\n//     );\n//     const target = document.querySelector('.form-grid .scrollable-xx-xxxx');\n\n//     if (list && target) {\n//       list.dataset.shifted = \"1\"; // mark so we don't move twice\n//       target.appendChild(list);\n\n//       // reset styles\n//       list.style.position = \"absolute\";\n//       list.style.top = \"100%\";  // default below input\n//       list.style.left = \"0\";\n//       list.style.width = \"250px\"; // force width if needed\n//       list.hidden = false;\n\n//       console.log(\"Awesomplete shifted (form-grid only)\");\n\n//       // Reposition near the active input inside form-grid\n//       const activeInput = target.querySelector(\".awesomplete input:focus\");\n//       if (activeInput) {\n//         const rect = activeInput.getBoundingClientRect();\n//         const gridRect = target.getBoundingClientRect();\n//         list.style.top = rect.bottom - gridRect.top + \"px\";\n//         list.style.left = rect.left - gridRect.left + \"px\";\n//         list.style.width = rect.width + \"px\";\n//       }\n//     }\n//   });\n\n//   observer.observe(document.body, {\n//     childList: true,\n//     subtree: true,\n//   });\n// });\n\n"],
  "mappings": "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",
  "names": []
}
